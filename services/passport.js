/**
 * Business logic
 */
const passport = require("passport")
const GoogleStratergy = require("passport-google-oauth20").Strategy
const keys = require("../config/keys")
const mongoose = require("mongoose")

//Fetching model class from mongoose
const User = mongoose.model("users")

//converts user model to cookie
passport.serializeUser((user, done) => {
    //user - User model instance(mongoose). Mongo record (user.id = id (_id) automatically generated by Mongo on creation)
    //user.id is taken as token
    done(null, user.id)
})

//converts cookie to user model
passport.deserializeUser((id, done) => {
    User.findById(id).then(user => {
        done(null, user)
    })
})
//Registering and configuring oauth stratergy
passport.use(
    new GoogleStratergy(
        {
            clientID: keys.googleClientID,
            clientSecret: keys.googleClientSecret,
            callbackURL: "/auth/google/callback", //route user to this URL when user grants permission
            proxy: true
        },
        (accessToken, refreshToken, profile, done) => {
            //gets called when oauth process is successful
            //accessToken - proves that we are allowed to access user's info
            //refreshToken - allows refresh of accessToken
            User.findOne({ googleId: profile.id })
                .then((existingUser) => {
                    if (existingUser) {
                        //We already have a record with a given profile ID
                        done(null, existingUser) //Required to tell Passport stratergy that auth has been done
                    } else {
                        //We do not already have a record with a given profile ID
                        new User({ googleId: profile.id })
                            .save() //Create new record in 'users' collection
                            .then((user) => done(null, user))
                    }
                })
                .catch((error) => {
                    console.log("DB ERROR::", error)
                })
        }
    )
)
